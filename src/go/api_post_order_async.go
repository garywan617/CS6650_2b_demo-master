/*
 * E-commerce API
 *
 * API for managing products, shopping carts, warehouse operations, and credit card processing
 *
 * API version: 1.0.0
 * Contact: support@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// 設定你的 SNS Topic ARN 與 SQS Queue URL
const (
	SNSTopicARN = "arn:aws:sns:us-west-2:211125691842:order-processing-events"
	SQSQueueURL = "https://sqs.us-west-2.amazonaws.com/211125691842/order-processing-queue"
)

var (
	snsClient *sns.Client
	sqsClient *sqs.Client
)

func init() {
	// 初始化 AWS SDK
	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		panic("unable to load AWS SDK config: " + err.Error())
	}
	snsClient = sns.NewFromConfig(cfg)
	sqsClient = sqs.NewFromConfig(cfg)

	// 啟動 Order Processor goroutine
	//go startOrderProcessor()
	// 啟動 100 個 Order Processor goroutines
	for i := 0; i < 20; i++ {
		go startOrderProcessor()
		fmt.Printf("Started Order Processor goroutine #%d\n", i+1)
	}
}

type PostOrderASyncAPI struct {
}

// 實作 /orders/async
func (api *PostOrderASyncAPI) PostOrderASync(c *gin.Context) {
	var order Order
	if err := c.BindJSON(&order); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// 生成新的 order_id
	order.OrderID = uuid.New().String()
	order.Status = "pending"
	order.CreatedAt = time.Now()

	// 將訂單 JSON 發送到 SNS
	data, _ := json.Marshal(order)
	_, err := snsClient.Publish(context.TODO(), &sns.PublishInput{
		Message:  aws.String(string(data)),
		TopicArn: aws.String(SNSTopicARN),
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// 回傳 202 Accepted
	c.Status(http.StatusAccepted)
}

func startOrderProcessor() {
	fmt.Println("Order Processor started...")
	for {
		// 接收最多 10 個訊息，等待 20 秒（long polling）
		output, err := sqsClient.ReceiveMessage(context.TODO(), &sqs.ReceiveMessageInput{
			QueueUrl:            aws.String(SQSQueueURL),
			MaxNumberOfMessages: 10,
			WaitTimeSeconds:     20,
		})
		if err != nil {
			fmt.Println("ReceiveMessage error:", err)
			time.Sleep(5 * time.Second)
			continue
		}

		if len(output.Messages) == 0 {
			continue
		}

		for _, msg := range output.Messages {
			var order Order
			if err := json.Unmarshal([]byte(*msg.Body), &order); err != nil {
				fmt.Println("Unmarshal error:", err)
				continue
			}

			// 模擬處理訂單
			fmt.Printf("Processing order: %s\n", order.OrderID)
			time.Sleep(3 * time.Second) // 模擬耗時處理

			// 處理完刪除 SQS 訊息
			_, err := sqsClient.DeleteMessage(context.TODO(), &sqs.DeleteMessageInput{
				QueueUrl:      aws.String(SQSQueueURL),
				ReceiptHandle: msg.ReceiptHandle,
			})
			if err != nil {
				fmt.Println("DeleteMessage error:", err)
			}
		}
	}
}
