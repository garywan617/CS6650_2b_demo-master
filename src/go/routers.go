/*
 * E-commerce API
 *
 * API for managing products, shopping carts, warehouse operations, and credit card processing
 *
 * API version: 1.0.0
 * Contact: support@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	router.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status": "healthy",
		})
	})
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the PaymentsAPI part of the API
	PaymentsAPI PaymentsAPI
	// Routes for the ProductsAPI part of the API
	ProductsAPI ProductsAPI
	// Routes for the ShoppingCartAPI part of the API
	ShoppingCartAPI ShoppingCartAPI
	// Routes for the WarehouseAPI part of the API
	WarehouseAPI WarehouseAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"SearchProducts",
			http.MethodGet,
			"/v1/products/search", // endpoint
			handleFunctions.ProductsAPI.SearchProducts,
		},
		{
			"ProcessPayment",
			http.MethodPost,
			"/v1/payments/checkout",
			handleFunctions.PaymentsAPI.ProcessPayment,
		},
		{
			"AddProductDetails",
			http.MethodPost,
			"/v1/products/:productId/details",
			handleFunctions.ProductsAPI.AddProductDetails,
		},
		{
			"GetProduct",
			http.MethodGet,
			"/v1/products/:productId",
			handleFunctions.ProductsAPI.GetProduct,
		},
		{
			"AddItemsToCart",
			http.MethodPost,
			"/v1/shopping-carts/:shoppingCartId/items",
			handleFunctions.ShoppingCartAPI.AddItemsToCart,
		},
		{
			"CheckoutCart",
			http.MethodPost,
			"/v1/shopping-carts/:shoppingCartId/checkout",
			handleFunctions.ShoppingCartAPI.CheckoutCart,
		},
		{
			"CreateShoppingCart",
			http.MethodPost,
			"/v1/shopping-carts",
			handleFunctions.ShoppingCartAPI.CreateShoppingCart,
		},
		{
			"ReserveInventory",
			http.MethodPost,
			"/v1/warehouse/reserve",
			handleFunctions.WarehouseAPI.ReserveInventory,
		},
		{
			"ShipProduct",
			http.MethodPost,
			"/v1/warehouse/ship",
			handleFunctions.WarehouseAPI.ShipProduct,
		},
	}
}
