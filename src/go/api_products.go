/*
 * E-commerce API
 *
 * API for managing products, shopping carts, warehouse operations, and credit card processing
 *
 * API version: 1.0.0
 * Contact: support@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"strconv"
	"sync"

	"github.com/gin-gonic/gin"
)

// var products = make(map[int32]Product) // Product
//
// func init() {
// 	products[1] = Product{1, "SKU-001", "Acme Corp", 10, 500, 1001}
// 	products[2] = Product{2, "SKU-002", "Beta Inc", 20, 1200, 1002}
// 	products[3] = Product{3, "SKU-003", "Gamma LLC", 30, 750, 1003}
// }

// create a thread-safe map
var products sync.Map

func init() {
	products.Store(int32(1), Product{1, "SKU-001", "Acme Corp", 10, 500, 1001})
	products.Store(int32(2), Product{2, "SKU-002", "Beta Inc", 20, 1200, 1002})
	products.Store(int32(3), Product{3, "SKU-003", "Gamma LLC", 30, 750, 1003})
}

type ProductsAPI struct {
}

// Post /v1/products/:productId/details
// Add product details
func (api *ProductsAPI) AddProductDetails(c *gin.Context) {
	idStr := c.Param("productId")
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		c.JSON(400, Error{
			Error:   "INVALID_INPUT",
			Message: "The provided input data is invalid",
			Details: "Product ID must be a positive integer",
		})
		return
	}

	// 檢查 products map 是否初始化
	// if products == nil {
	// 	c.JSON(http.StatusInternalServerError, Error{
	// 		Error:   "INTERNAL_SERVER_ERROR",
	// 		Message: "Something went wrong on the server",
	// 		Details: "Products map is not initialized",
	// 	})
	// 	return
	// }

	var newProduct Product

	// Call BindJSON to bind the received JSON to
	// newProduct.
	if err := c.BindJSON(&newProduct); err != nil {
		c.JSON(400, Error{
			Error:   "INVALID_INPUT",
			Message: "Invalid JSON body",
			Details: err.Error(),
		})
		return
	}

	// 檢查 productId 是否對應
	if newProduct.ProductId != int32(id) {
		c.JSON(400, Error{
			Error:   "INVALID_INPUT",
			Message: "Product ID mismatch",
			Details: "ProductId in body must match URL path",
		})
		return
	}

	// 存到 map
	// products[newProduct.ProductId] = newProduct
	// 存到 sync.map
	products.Store(newProduct.ProductId, newProduct)
	c.IndentedJSON(204, newProduct)
}

// Get /v1/products/:productId
// Get product by ID
func (api *ProductsAPI) GetProduct(c *gin.Context) {
	// Your handler implementation
	idStr := c.Param("productId")
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		apiError := Error{
			Error:   "INVALID_INPUT",
			Message: "The provided input data is invalid",
			Details: "Product ID must be a positive integer",
		}
		c.IndentedJSON(400, apiError)
		return
	}
	// 檢查 products map 是否初始化
	// if products == nil {
	// 	apiError := Error{
	// 		Error:   "INTERNAL_SERVER_ERROR",
	// 		Message: "Something went wrong on the server",
	// 		Details: "Products map is not initialized",
	// 	}
	// 	c.IndentedJSON(http.StatusInternalServerError, apiError)
	// 	return
	// }

	//product, exists := products[int32(id)]
	product, exists := products.Load(int32(id))
	if !exists {
		apiError := Error{
			Error:   "Product not found",
			Message: "The provided product ID is not found",
			Details: "Product ID does not exist in the system",
		}
		c.IndentedJSON(404, apiError)
		return
	}

	c.IndentedJSON(200, product)
}
